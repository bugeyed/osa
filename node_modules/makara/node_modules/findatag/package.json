{
  "name": "findatag",
  "version": "0.0.9",
  "description": "A specialized tokenizer for finding dust-style tags ({@tagname [attributes]/})",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/paypal/findatag.git"
  },
  "engines": {
    "node": ">=0.10.4"
  },
  "keywords": [
    "dust",
    "templating"
  ],
  "author": {
    "name": "Bryan Spears",
    "email": "bspears@paypal.com"
  },
  "contributors": [
    {
      "name": "Erik Toth",
      "email": "ertoth@paypal.com"
    }
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "async": "0.2.x",
    "readable-stream": "1.0.15"
  },
  "devDependencies": {
    "chai": "~1.5.0",
    "mocha": "~1.9.0"
  },
  "homepage": "https://github.com/paypal/findatag",
  "readme": "findatag\n==========\n\nString tokenizer configured to recognize a particular pattern: `{@[A-Za-z._] [attrs...]/}`.\n\n\n### API\n\n#### createParseStream(entityHandler)\nThis factory method creates a ParseStream initialized with the provided entity handler.\n```javascript\nvar finder = require('findatag');\n\nvar stream = finder.createParseStream(handler);\nfs.createReadStream('./file/to/process').pipe(stream).pipe(process.stdout);\n```\n\n\n#### parse(file, entityHandler, callback)\nReads the file at the given file path and parses it, passing entity information to the provided entity handler.\n```javascript\nvar finder = require('findatag');\n\nfinder.process('./file/to/process', handler, function (err, result) {\n    // result is the full processed file\n});\n```\n\n\n### Entity Handler\nThe parser needs to be provided with an entity handler that provides the implementation for what to be done\nwhen the parse encounters a particular entity: tag or text.\n\n#### tags\nGetter exposing an array of strings or a comma-delimited string containing the names of tags recognized by this handler.\n\n\n#### onTag(definition, callback)\nThe method invoked when any given tag is enountered. The tag definition is has the structure:\n```javascript\n{\n    name: 'tagname',\n    attributes: {\n        'attributeName': 'attributeValue'\n    }\n}\n```\n\nThe callback has the signature `function (err, result)` and should be invoked with the string with which to replace the\noriginal tag.\n\n```javascript\n// ...\n\nonTag: function (def, cb) {\n    cb(null, def.name.toUpperCase());\n}\n\n//...\n```\n\n#### onText(chunk, callback) [optional]\nThis optional delegate method can perform operations on the provide text chunk. The callback has the signature\n`function (err, result)` and should be invoked with the string with which to replace the original text.\n\n\n\n### Example\n```javascript\nvar finder = require('findatag');\n\nvar entityHandler = {\n    _handlers: {\n       'pre': { ... },\n       'foo': { ... }\n    },\n\n    get tags () {\n        return Object.keys(this._handlers);\n    },\n\n    onTag: function (def, cb) {\n        this._handlers[def.name].exec(def, cb);\n    },\n\n    onText: function (chunk, cb) {\n        cb(null, chunk.toUpperCase();\n    }\n}\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paypal/findatag/issues"
  },
  "_id": "findatag@0.0.9",
  "dist": {
    "shasum": "860506fbbd12df3154746a8e053d68252ca123ac"
  },
  "_from": "findatag@~0.0.8",
  "_resolved": "https://registry.npmjs.org/findatag/-/findatag-0.0.9.tgz"
}
