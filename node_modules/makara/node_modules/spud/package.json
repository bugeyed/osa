{
  "name": "spud",
  "version": "0.0.3",
  "description": "Convert content bundles to and from different formats, including .properties, .json, etc.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.paypal.com:NodeInfra/node-transcoder.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "i18n"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "string.fromcodepoint": "~0.1.0"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "readme": "Spud\n---------------------------\nConvert content bundles to and from different formats, including .properties, .json, etc.\n\nAPI\n---------------------------\n\n#### spud.registerSerializer(name, serializer)\nRegister a custom serializer. See the \"Plugins\" section below for more information on custom serializers\n```javascript\nvar mySerializer = require('node-mySerializer');\nrequire('spud').registerSerializer('mySerializer', mySerializer);\n```\n\n\n#### spud.convert(source, sourceType, targetType, [writeStream], [callback])\nDeserializes the source (file, buffer, or Read Stream) of type sourceType and serializes to targetType,\nwriting the results to the optional writeStream, or providing them to the optional callback. The callback\nshould have the signature `function (err, data);`\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\treadStream = fs.createReadStream('./config.json'),\n\twriteStream = fs.createWriteStream('./config.properties');\n\nspud.convert(readStream, 'json', 'properties', writeStream, function (err) {\n\tconsole.log('Conversion complete.');\n});\n```\n\n\n#### spud.deserialize(source, sourceType, callback)\nDeserializes the source (file, buffer, or Read Stream) of type sourceType and invokes the provided callback\nwith the result or any error that occurred. The callback should have the signature `function (err, data);`\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\treadStream = fs.createReadStream('./config.json');\n\nspud.deserialize(readStream, 'json', function (err, data) {\n\tconsole.log(err || data);\n\tconsole.log('Conversion complete.');\n});\n```\n\n\n#### spud.serialize(source, targetType, [writeStream], [callback])\nSerializes the source (String) to targetType and invokes the provided callback with the result\nor any error that occurred. The callback should have the signature `function (err, data);`\n```javascript\nvar spud = require('spud'),\n\tfs = require('fs'),\n\twriteStream = fs.createWriteStream('./config.json');\n\nvar settings = {\n\thost: \"www.paypal.com\",\n\tport: 8080\n};\n\nspud.serialize(settings, 'json', writeStream, function (err) {\n\tconsole.log('Conversion complete.');\n});\n```\n\n\nPlugins\n---------------------------\nWriting serializers is easy. It's just 3 steps:\n\n1) Make sure your module exports an object with a property called 'Reader' and one called 'Writer' whose values\nare the constructors for your deserializer and serialzer, respectively:\n\n```javascript\n// index.js\nmodule.exports = {\n\tReader: MyReader,\n\tWriter: MyWriter\n};\n```\n\n2) Build out your deserializer implementation. It merely needs to implement a method called _doDeserialize that\naccepts data (in the form of a string) and callback arguments, and invokes the callback with error and deserialized data.\n\n```javascript\nfunction MyReader() {\n\n}\n\nMyReader.prototype = {\n\t_doDeserialize: function(input, callback) {\n\t\t// TODO: Implement\n\t\tvar data = null;\n\t\t// ...\n\t\tcallback(null, data);\n\t};\n};\n```\n\n3) Build out your serializer implementation and a Read Stream for outputting the serialized data. \n\n``` javascript\nfunction MyWriter() {\n\n}\n\nMyWriter.prototype = {\n\t_doCreateReadStream: function (data) {\n\t\treturn new CustomReadStream(data);\n\t}\n};\n```\n\nThe stream must accept a data object in its constructor and implement the [NodeJS Read Stream interface]\n(http://nodejs.org/api/stream.html#stream_readable_stream). It is likely that this where your serialization\nimplementation will go. When chunks of data are availble/serialized, write them out using the 'data' event.\n\n```javascript\nvar util = require('util');\n\nfunction CustomReadStream(data) {\n\tStream.call(this);\n\tthis._data = data;\n}\nutil.inherits(ReadStream, Stream);\n\nMyStream.prototype.pause = function () {\n\t// noop\t\n};\n\nMyStream.prototype.drain = function () {\n\t// noop\n};\n\nMyStream.prototype.resume = function () {\n\tvar serialized = null;\n\t// TODO: Serialize this._data\n\tthis.emit('data', serialized);\n};\n```\n",
  "readmeFilename": "README.md",
  "_id": "spud@0.0.3",
  "dist": {
    "shasum": "07dfae0ed1c31b9393c8753da6f603903987d248"
  },
  "_from": "spud@~0.0.2",
  "_resolved": "https://registry.npmjs.org/spud/-/spud-0.0.3.tgz"
}
