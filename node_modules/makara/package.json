{
  "name": "makara",
  "version": "0.3.4",
  "description": "i18n support for dust.js templates",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paypal/makara.git"
  },
  "keywords": [
    "dust.js",
    "i18n",
    "internationalization",
    "localization",
    "templates"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "contributors": [
    {
      "name": "Richard Ragan",
      "email": "rragan@paypal.com"
    },
    {
      "name": "Stephen Westhafer",
      "email": "swesthafer@paypal.com"
    },
    {
      "name": "Lenny Markus",
      "email": "lmarkus@paypal.com"
    },
    {
      "name": "Jeff Harrell",
      "email": "jharrell@paypal.com"
    },
    {
      "name": "Jean-Charles Sisk",
      "email": "jsisk@paypal.com"
    },
    {
      "name": "Sanjeev Koranga",
      "email": "skoranga@paypal.com"
    },
    {
      "name": "Dereck Quock",
      "email": "dquock@paypal.com"
    }
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "devDependencies": {
    "mocha": "~1.11.0",
    "chai": "~1.7.1",
    "grunt": "~0.4.1",
    "express": "~3.4.x",
    "grunt-dustjs": "~0.2.2",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "dustjs-linkedin": "^2.0.0",
    "dustjs-helpers": "~1.1.1",
    "adaro": "~0.1.4"
  },
  "dependencies": {
    "findatag": "~0.0.8",
    "ent": "0.0.5",
    "q": "~0.9.6",
    "spud": "~0.0.2",
    "graceful-fs": "~2.0.1"
  },
  "peerDependencies": {
    "dustjs-linkedin": "^2.0.0",
    "adaro": "~0.1.4"
  },
  "readme": "#### Makara\n\nLoad content bundles from a specific location. Optionally, decorate an express app to consume pre-localized templates,\nor localize templates on-the-fly. A summary of content property files and their use is also covered here.\n\n\n##### Example\n\n```javascript\nvar i18n = require('makara');\n\nvar provider = i18n.create(config);\nprovider.getBundle('index', 'en_US', function (err, bundle) {\n    var string = bundle.get('key');\n});\n```\n\n\n```javascript\nvar express = require('express'),\n    i18n = require('makara'),\n    dustjs = require('adaro');\n\n\nvar app = express();\n\napp.engine('dust', dustjs.dust({ cache: false }));\napp.engine('js', dustjs.js({ cache: false }));\n\napp.set('views', 'path/to/templates');\napp.set('view engine', 'dust');\napp.set('view cache', false);\n\n// Decorate express app with localized template rendering capabilities.\ni18n.create(app, config);\n```\n\n\n\n##### Configuration\n\nRequired\n- contentPath (contentRoot) - (String)\n- fallback (fallbackLocale) - (String, Object)\n- templatePath (templateRoot) - (String)\n\nOptional\n- enableMetadata (enableHtmlMetadata) - (boolean, default: false)\n- cache - (boolean, default: false)\n\n#### Content\n\nContent intended for localization is stored in .properties files as simple key=value pairs. \nThese are the files that hold the content strings for the different languages your application supports.\nNormally, you are likely to start with a master set of content (likely in English) and the L10N\nprocess will populate corresponding files for the other languages you will need.\n\n##### Placement of .properties files\n\nThe root of the .properties content files is the locales folder at the top level of your\nproject. Under it will be a folder per country (e.g., US/, DE/,...). Below each country\nfolder is one or more language folders (e.g. en/). So locales/US/en/ will be the likely\nlocation for your master set of .properties files. \n\n.properties files are correlated with the dust templates that use them, by path and name.\nSo if you have a top level index.dust file, its content .properties file will be at locales/US/en/index.properties\nThis holds all the external content strings used by that template. If your template is at\nwidgets/display.dust then the content will be at locales/US/en/widgets/display.properties. If you have\ncontent you want to share across pages, then you should factor out use of that content into a\nseparate partial and use that partial to achieve content sharing.\n\n##### What's in a .properties file\n\nThe format is simple: key=value with one message per line coded in UTF-8.\nComments are prefixed with # and may be used for metadata annotations.\n\nLet's look at some samples and then use them to discuss various points.\n\nindex.properties file\n````\nindex.title=PayPal Merchant\nindex.callToAction=Enroll now!\nindex.greeting=Welcome {userName}\n\n# A list\nindex.ccList[0]=Visa\nindex.ccList[1]=Mastercard\nindex.ccList[2]=Discover\n\n# A map\nindex.states[AL]=Alabama\nindex.states[AK]=Alaska\nindex.states[AZ]=Arizona\nindex.states[CA]=California\n````\n\nWe are using the name of the file to start our key on each line. This is strictly\na convention that makes the path to the file clear. \nThe above could have omitted the leading \"index.\" and the results would be the same.\nText to the right of the = sign is a simple message string with the text of the message.\nIf you have runtime values to be inserted, use dust brace to select the value\nfrom the dust template context as in the index.greeting line. This works because\nthe content strings are inlined into your template during the build process so references\nlike {userName} are just handled by dust. Note that there is no restriction on \ninserting HTML tags into the messages. They are just another string of characters\nas far as the content processing is concerned.\n\nIn addition to simple strings, we support lists (e.g, indexable list of messages) and\nmaps (content indexable collection of messages). So the index.ccList above might\nbe used to provide a list of values to go in a list of allowed credit cards.\nThe index.states might be used to populate a dropdown list of states with the\nkey as the option tag value and the full state name as the visible text.\n\nTo support writing the key part in natural languages other than English, all UTF-8 characters\nare allowed with a few exceptions needed to make the key=value syntax work. The\nexceptions are:\n- No equal sign in key part (e.g. first equal sign starts the value)\n- No periods in key part (used to allow keys like a.b.c)\n- No square brackets (used for subscript and map key notation)\n- May not start with # (Used for comments)\n\nThese same general restrictions apply to map key values.  If you need to\nuse characters that are restricted, you can do so using either of these\nescaping mechanisms:\n- \\udddd - Like JavaScript but only handles the same characters supported by this notation in JavaScript\n- \\u{dddddd} - Like JavaScript ES6 notation and handles all possible Unicode characters\n\nFor example,\n\n\\u2603=snowman\n\nwould use the Unicode snowman character for the key name.\n\nThere are some edge cases worth mentioning:\n\nCase 1:\n```\nkey.subkey=foo\nkey.subkey[bar]=baz\n```\n\nIn this case, subkey is created originally as a string value but is then overridden as a map. The original\nfoo value will be discarded.\n\nCase 2:\n```\nkey.subkey[0]=1\nkey.subkey[foo]=bar\n```\n\nIn this case, key.subkey is created originally as a list but is then converted to a map when the alphanumeric key is added.\n\n##### How do I reference content in a dust template?\n\nThis is done using the {@pre} helper tag. Unlike other dust helper tags, the\n@pre tag is expanded inline in your template during build time. A copy of the\ntemplate is generated for each locale you support and the build inserts the\ncontent appropriate to each locale. The result is a template per locale\nwith the messages for that locale.\n\nA sample usage of @pre might be:\n\n{@pre type=\"content\" key=\"index.title\"/}\n\nLists and maps are bit trickier when it comes to inlining.\nThere are two approaches available. The first uses three additional\nattributes on the @pre tag, before=\"xxx\" and after=\"yyy\" and  sep=\"z\".\nWhen emitting the list elements, each will be prefixed by the \"before\"\nstring, if there is one, suffixed by the \"after\" string, if there is one,\nand separated by the \"sep\" string, if there is one. With sep, the last\nelement is not followed by the separator. Note that the value {$idx} can be\nused in the before/after attribute strings and it will be replaced by\nthe current iteration count when inlining the lists. Similarly, {$key}\nwill be replaced with the current key when inlining a map. No replacement\nis done in the sep string.\n\nIn some cases inlining won't do, even with before/after/sep.\nFor example, if you need to pass the list as a parameter to a templating\npartial that might implement a dropdown functionality.\n\nFor this, @pre with a mode=\"paired\" attribute offers you more flexibility.\n\nThe mode=\"paired\" parameter produces the content list such that you can use both the \nindex of the element for the value in an option tag and the value for the displayable text.\n\nThe mode=\"paired\" attribute delivers the content in the  form of a JSON\nobject, which in the case of a list of months might look like:\n\n[{$id:0,$elt:\"Jan\"}, {$id:1,$elt:\"Feb\"},.. ]\n\nThis gives you more ability to work with both the list/map value and the element value\nin your template.\n\nIn addition to mode=\"paired\", there is an alternate form, mode=\"json\". This generates the\ncontent list or map as a standard JavaScript array or an object with properties, respectively.\n\n\n\n# Contributing\n\nBugs and new features should be submitted using [GitHub issues](https://github.com/paypal/makara/issues/new). Please include with a detailed description and the expected behavior. If you would like to submit a change yourself do the following steps.\n\n1. Fork it.\n2. Create a branch (`git checkout -b fix-for-that-thing`)\n3. Commit a failing test (`git commit -am \"adds a failing test to demonstrate that thing\"`)\n3. Commit a fix that makes the test pass (`git commit -am \"fixes that thing\"`)\n4. Push to the branch (`git push origin fix-for-that-thing`)\n5. Open a [Pull Request](https://github.com/paypal/makara/pulls)\n\nPlease keep your branch up to date by rebasing upstream changes from master.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paypal/makara/issues"
  },
  "homepage": "https://github.com/paypal/makara",
  "_id": "makara@0.3.4",
  "dist": {
    "shasum": "fc6e06867dc15eb255e1f0195555633326412786"
  },
  "_from": "makara@^0.3.4",
  "_resolved": "https://registry.npmjs.org/makara/-/makara-0.3.4.tgz"
}
