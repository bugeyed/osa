{
  "name": "gpio",
  "version": "0.2.5",
  "author": {
    "name": "Dominick Pham",
    "email": "dominick@dph.am",
    "url": "http://dph.am"
  },
  "description": "Talk to your Raspberry PI's general purpose inputs and outputs",
  "keywords": [
    "gpio",
    "raspberry",
    "pi"
  ],
  "main": "./lib/gpio.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/EnotionZ/GpiO.git"
  },
  "devDependencies": {
    "sinon": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/EnotionZ/GpiO/master/LICENSE"
    }
  ],
  "readme": "# gpio - talk to your Raspberry Pi's gpio headers\n\n* demo using LED: http://www.youtube.com/watch?v=2Juo-CJ6eu4\n* demo using RC car: http://www.youtube.com/watch?v=klQdX8-YVaI\n\n##Installation\n##### Get node.js on your Raspberry Pi\nOn Raspbian, you can simply run `apt-get install nodejs`,\notherwise, [compile it](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)\n\n## Usage\n\nThis library is an npm package, just define \"gpio\" in your package.json dependencies or\n```js\nnpm install gpio\n```\n\n##### Note: you must be running as root or have the proper priviledges to access the gpio headers\n\n##### Standard setup\n\n```js\nvar gpio = require(\"gpio\");\n\n// Calling export with a pin number will export that header and return a gpio header instance\nvar gpio4 = gpio.export(4, {\n   // When you export a pin, the default direction is out. This allows you to set\n   // the pin value to either LOW or HIGH (3.3V) from your program.\n   direction: 'out',\n\n   // set the time interval (ms) between each read when watching for value changes\n   // note: this is default to 100, setting value too low will cause high CPU usage\n   interval: 200,\n\n   // Due to the asynchronous nature of exporting a header, you may not be able to\n   // read or write to the header right away. Place your logic in this ready\n   // function to guarantee everything will get fired properly\n   ready: function() {\n   }\n});\n```\n\n##### Header direction \"in\"\nIf you plan to set the header voltage externally, use direction `in` and read value from your program.\n```js\nvar gpio = require(\"gpio\");\nvar gpio4 = gpio.export(4, {\n   direction: \"in\",\n   ready: function() {\n   }\n});\n```\n\n##### API Methods\n\n```js\n// sets pin to high\ngpio4.set();\n```\n```js\n// sets pin to low (can also call gpio4.reset())\ngpio4.set(0);\n```\n```js\n// Since setting a value happens asynchronously, this method also takes a\n// callback argument which will get fired after the value is set\ngpio4.set(function() {\n   console.log(gpio4.value);    // should log 1\n});\ngpio4.set(0, function() {\n   console.log(gpio4.value);    // should log 0\n});\n```\n```js\n// unexport program when done\ngpio4.unexport();\n```\n\n##### EventEmitter\nThis library uses node's [EventEmitter](http://nodejs.org/api/events.html) which allows you to watch\nfor value changes and fire a callback.\n```js\n// bind to the \"change\" event\ngpio4.on(\"change\", function(val) {\n   // value will report either 1 or 0 (number) when the value changes\n   console.log(val)\n});\n      \n// you can bind multiple events\nvar processPin4 = function(val) { console.log(val); };\ngpio4.on(\"change\", processPin4);\n            \n// unbind a particular callback from the \"change\" event\ngpio4.removeListener(\"change\", processPin4);\n      \n// unbind all callbacks from the \"change\" event\ngpio4.removeAllListeners(\"change\");\n      \n// you can also manually change the direction anytime after instantiation            \ngpio4.setDirection(\"out\");\ngpio4.setDirection(\"in\");\n```\n\n## Example\n##### Cycle voltage every half a second\n```js\nvar gpio = require(\"gpio\");\nvar gpio22, gpio4, intervalTimer;\n\n// Flashing lights if LED connected to GPIO22\ngpio22 = gpio.export(22, {\n   ready: function() {\n      inervalTimer = setInterval(function() {\n         gpio22.set();\n         setTimeout(function() { gpio22.reset(); }, 500);\n      }, 1000);\n   }\n});\n\n// Lets assume a different LED is hooked up to pin 4, the following code \n// will make that LED blink inversely with LED from pin 22 \ngpio4 = gpio.export(4, {\n   ready: function() {\n      // bind to gpio22's change event\n      gpio22.on(\"change\", function(val) {\n         gpio4.set(1 - val); // set gpio4 to the opposite value\n      });\n   }\n});\n\n// reset the headers and unexport after 10 seconds\nsetTimeout(function() {\n   clearInterval(intervalTimer);          // stops the voltage cycling\n   gpio22.removeAllListeners('change');   // unbinds change event\n   gpio22.reset();                        // sets header to low\n   gpio22.unexport();                     // unexport the header\n   \n   gpio4.reset();\n   gpio4.unexport(function() {\n      // unexport takes a callback which gets fired as soon as unexporting is done\n      process.exit(); // exits your node program\n   });\n}, 10000)\n```\n\n\n##### Controlling an RC car\nSource code here: https://github.com/EnotionZ/node-rc\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/EnotionZ/GpiO/issues"
  },
  "homepage": "https://github.com/EnotionZ/GpiO",
  "_id": "gpio@0.2.5",
  "_from": "gpio@latest"
}
