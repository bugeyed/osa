{
  "name": "grunt-dustjs",
  "description": "Grunt task to compile Dust.js templates.",
  "version": "1.2.1",
  "homepage": "https://github.com/STAH/grunt-dustjs",
  "author": {
    "name": "Stanislav Lesnikov",
    "email": "stan@nashdot.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/STAH/grunt-dustjs.git"
  },
  "bugs": {
    "url": "https://github.com/STAH/grunt-dustjs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/STAH/grunt-dustjs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "bin": {
    "grunt-dustjs": "bin/grunt-dustjs"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "dustjs-linkedin": ">= 2.0.0"
  },
  "peerDependencies": {
    "grunt": "0.4.x"
  },
  "devDependencies": {
    "grunt": "~0.4.x",
    "grunt-contrib-jshint": "~0.8.0"
  },
  "keywords": [
    "dustjs",
    "grunt",
    "gruntplugin"
  ],
  "readme": "grunt-dustjs\r\n----------\r\n\r\nGrunt task to compile Dust.js templates.\r\n\r\nGetting Started\r\n===============\r\n\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-dustjs`.\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks(\"grunt-dustjs\");\r\n```\r\n\r\n[getting_started]: https://github.com/gruntjs/grunt/wiki/Getting-started\r\n[grunt]: http://gruntjs.com\r\n\r\nDocumentation\r\n=============\r\n\r\nInside your `grunt.js` file, add a section named `dustjs` with one or more targets. Each section contains a files object that specifies the Dust.js template files to compile.\r\n\r\n##### `files` object\r\nThis defines what files this task will process. It can contain any valid Grunt files format.\r\n\r\nWhen using a src/dest format, the key (destination) should be an unique filepath (supports [grunt.template](https://github.com/gruntjs/grunt/wiki/grunt.template)) and the value (source) should be a filepath or an array of filepaths (supports [minimatch](https://github.com/isaacs/minimatch)). All source files will be combined into the destination output.\r\n\r\nWhen using the dynamic format (example #3), each source file will be processed into its own destination file.\r\n\r\n### Options\r\n\r\n##### `fullname` _default_: `false`\r\nUsed to customize the template variable names. If `fullname` is `true`, the full path will be used as the template name. If `fullname` is a function, the function receives a single argument, which is the full path, and returns the name of the template.\r\n\r\n##### `transformQuote` _default_: `false`\r\nUsed to reverse quotes usage by dustjs: double quotes replaced by single quotes and vice versa. Output is more clean after this transformation.\r\n\r\n### Example #1\r\n\r\n```javascript\r\nmodule.exports = function (grunt) {\r\n  //...\r\n  grunt.loadNpmTasks(\"grunt-dustjs\");\r\n  //...\r\n\r\n  var config = {\r\n    //...\r\n    dustjs: {},\r\n    //...\r\n  };\r\n\r\n  config.dustjs: {\r\n    compile: {\r\n      files: {\r\n        \"js/templates.js\": [\"src/templates/**/*.html\"]\r\n      }\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n### Example #2 (custom template names)\r\n\r\n```javascript\r\nvar path = require(\"path\");\r\n\r\nmodule.exports = function (grunt) {\r\n  //...\r\n  grunt.loadNpmTasks(\"grunt-dustjs\");\r\n  //...\r\n\r\n  var config = {\r\n    //...\r\n    dustjs: {},\r\n    //...\r\n  };\r\n\r\n  config.dustjs: {\r\n    compile: {\r\n      files: {\r\n        \"js/templates.js\": [\"src/templates/**/*.html\"]\r\n      },\r\n      options: {\r\n        fullname: function(filepath) {\r\n          var key = path.relative(\"src/templates\", path.dirname(filepath)).split(path.sep) // folder names\r\n            .concat([path.basename(filepath, path.extname(filepath))]) // template name\r\n            .join(\".\");\r\n\r\n          if (key.charAt(0) == \".\")\r\n            return key.substr(1, key.length - 1);\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n\r\n### Example #3 (one JS file per template)\r\n\r\n```javascript\r\nmodule.exports = function (grunt) {\r\n  //...\r\n  grunt.loadNpmTasks(\"grunt-dustjs\");\r\n  //...\r\n\r\n  var config = {\r\n    //...\r\n    dustjs: {},\r\n    //...\r\n  };\r\n\r\n  config.dustjs: {\r\n    compile: {\r\n      files: [\r\n        {\r\n          expand: true,\r\n          cwd: \"dust/\",\r\n          src: \"**/*.html\",\r\n          dest: \"\",\r\n          ext: \".js\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n\r\nContributing\r\n============\r\n\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\r\n\r\nRelease History\r\n===============\r\n*   __07/02/2014 - 1.2.1__: Update jshint\r\n*   __14/01/2014 - 1.2.0__: Add append/prepend wrapper strings (@kreegr), error handling (@sunflowerdeath)\r\n*   __23/07/2013 - 1.1.0__: Introduce transformQuote option.\r\n*   __23/07/2013 - 1.0.1__: Correct expand function.\r\n*   __18/07/2013 - 1.0.0__: Release.\r\n*   __18/07/2013 - 0.2.4__: Update examples.\r\n*   __19/01/2013 - 0.2.2__: Grunt v0.4rc5 compatibility (@toddself).\r\n*   __14/12/2012 - 0.2.1__: Grunt v0.4 compatibility (@SpeCT).\r\n*   __08/12/2012 - 0.2.0__: Add namespace support (@bernharduw).\r\n*   __25/09/2012 - 0.1.2__: Initial release.\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2013-2014 Stanislav Lesnikov\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-dustjs@1.2.1",
  "dist": {
    "shasum": "aff05c7441305cb5d8f93e30224dff5485286d48"
  },
  "_from": "grunt-dustjs@^1.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-dustjs/-/grunt-dustjs-1.2.1.tgz"
}
