{
  "name": "express-enrouten",
  "version": "0.0.4",
  "description": "An express route initialization and configuration module.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/paypal/express-enrouten.git"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "keywords": [
    "expressjs",
    "node",
    "js",
    "javascript",
    "routing"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "devDependencies": {
    "mocha": "~1.9.0",
    "chai": "~1.5.0"
  },
  "readme": "express-enrouten\n==================\n\n\nRoute configuration middleware for expressjs.\n\n\n### API\n#### `enrouten(app).withRoutes(options)`\n```javascript\nvar express = require('express'),\n    enrouten = require('express-enrouten');\n\nvar app = express();\nenrouten(app).withRoutes({ ... });\n```\n\n\n### Configuration\nexpress-enrouten supports routes via configuration and convention.\n```javascript\nenrouten(app).withRoutes({\n    directory: 'controllers',\n    routes: [{\n        method: 'get',\n        path: '/foo',\n        handler: function (req, res) {\n            // ...\n        }\n    }]\n});\n```\n\n- `directory` (optional) - String or array of path segments. Specify a directory to have enrouten scan all files recursively\nto find files that match the controller-spec API.\n\n```javascript\nenrouten(app).withRoutes({\n    directory: 'controllers'\n});\n```\n\n- `routes` (optional) An array of route definition objects. Each definition must have a `path` and `handler` property and\ncan have an optional `method` property (`method` defaults to 'GET').\n\n```javascript\nenrouten(app).withRoutes({\n    routes: [\n        { path: '/',    method: 'GET', handler: require('./controllers/index') },\n        { path: '/foo', method: 'GET', handler: require('./controllers/foo') }\n    ]\n});\n```\n\n- `index` (optional, overrides `directory` and disables scanning) - String path or array of path segments indicating\nthe file to load which acts as the route 'index' of the application.\n\n```javascript\n// index.js\nmodule.exports = function (app) {\n\n    app.get('/', index);\n    app.get('/account', passport.protect, account);\n\n    // etc...\n};\n```\n\n### Controller Files\nA 'controller' is defined as any javascript file (extension of `.js`) which exports a function that accepts a single argument.\n**NOTE: Any file in the directory tree that matches the API will be invoked/initialized with the express application object.**\n```javascript\n// Good :)\n// controllers/controller.js\nmodule.exports = function (app) {\n    app.get('/', function (req, res) {\n        // ...\n    });\n};\n\n// Bad :(\n// Function does not get returned when `require`-ed, use `module.exports`\nexports = function (app) {\n    // ...\n};\n\n// Bad :(\n// controllers/other-file-in-same-controller-directory.js\nmodules.exports = function (config) {\n    // `config` will be the express application\n    // ...\n};\n\n// Acceptable :)\n// controllers/config.json - A non-js file (ignored)\n// controllers/README.txt - A non-js file (ignored)\n// controllers/util.js - A js file that has a different API than the spec (ignored)\nmodule.exports = {\n    importantHelper: function () {\n\n    }\n};\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paypal/express-enrouten/issues"
  },
  "homepage": "https://github.com/paypal/express-enrouten",
  "_id": "express-enrouten@0.0.4",
  "dist": {
    "shasum": "b3cda8fae81e1a2595a87e2451e773441a2b92b5"
  },
  "_from": "express-enrouten@~0.0.3",
  "_resolved": "https://registry.npmjs.org/express-enrouten/-/express-enrouten-0.0.4.tgz"
}
