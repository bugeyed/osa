{
  "name": "kraken-js",
  "version": "0.7.3",
  "description": "An express-based Node.js web application bootstrapping module.",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/krakenjs/kraken-js.git"
  },
  "keywords": [
    "node.js",
    "node",
    "javascript",
    "js",
    "web",
    "mvc",
    "framework"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "contributors": [
    {
      "name": "Jeff Harrell",
      "email": "jeharrell@paypal.com"
    },
    {
      "name": "Trevor Livingston",
      "email": "trlivingston@paypal.com"
    },
    {
      "name": "Lenny Markus",
      "email": "lmarkus@paypal.com"
    },
    {
      "name": "Jean-Charles Sisk",
      "email": "jsisk@paypal.com"
    }
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "engineStrict": true,
  "dependencies": {
    "express-enrouten": "~0.0.3",
    "formidable": "~1.0.14",
    "lusca": "~1.0.0",
    "kraken-devtools": "~0.0.3",
    "mkdirp": "~0.3.5",
    "rimraf": "~2.2.2",
    "q": "~0.9.7",
    "jsonminify": "~0.2.2",
    "shortstop": "0.0.1"
  },
  "peerDependencies": {
    "express": "~3.4",
    "nconf": "~0.6"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "chai": "~1.8.1",
    "jshint": "~2.3.0",
    "less": "~1.3.3",
    "consolidate": "~0.9.1",
    "jade": "~0.29.0",
    "dustjs-linkedin": "~2.0.2",
    "dustjs-helpers": "~1.1.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-mocha-test": "~0.7.0",
    "grunt-contrib-clean": "~0.5.0",
    "nconf": "~0.6.8",
    "adaro": "~0.1.3",
    "makara": "~0.3.0",
    "supertest": "~0.8.1",
    "express": "~3.4"
  },
  "readme": "# Kraken\n\nA Node.js web application framework.\n\n[![Build Status](https://travis-ci.org/krakenjs/kraken-js.png)](https://travis-ci.org/krakenjs/kraken-js)\n[![NPM version](https://badge.fury.io/js/kraken-js.png)](http://badge.fury.io/js/kraken-js)\n\n\n## The Kraken Suite\nKrakenJS is part of the Kraken Suite. If you'd like to find out more about the other modules, please visit [krakenjs.com](http://krakenjs.com). You can also find [examples and tutorials](http://krakenjs.com/#Examples) there.\n\n\n## Getting Started\n\nTo create a new project:\n\n1. Install Yeoman and the Kraken Generator:\n`npm install -g generator-kraken`\n2. Generate a Kraken project:\n`yo kraken`\n3. Go to your project directory and start your project. By default, it will listen on port 8000:\n`npm start`\n\n\n## Directory structure\n\n- **/config** - Application and middleware configuration\n- **/controllers** - Controllers\n- **/lib** - Custom developer libraries and other code\n- **/locales** - Local-based content\n- **/models** - Models\n- **/public** - Web resources that are publicly available\n- **/public/templates** - Server and browser-side templates\n- **/tests** - Unit and functional test cases\n\n\n\n## Configuration\n\nConfiguration is stored in JSON format. Each settings file can be overridden in development mode by creating a `-development` version, e.g. app-development.json.\n\n- **/config/app.json** - Application specific settings\n- **/config/middleware.json** - Custom middleware specific settings\n\n### Using custom configuration\nIf you'd like to add your own configuration to these files, simply include a new key.\nTo retrieve it in your application, you can do so during the [configuration step](#application-life-cycle-middleware)\n\n### Default Values\n*app.json values:*\n\n- **host** - The application host. *Default: localhost*\n- **port** - The application port to bind to. *Default: `8000`*\n- **i18n**\n  - **fallback** - Locale fallback to use if content files aren't found. *Default: `\"en-US\"`*\n  - **contentPath** - Root path to content files. *Default: `\"path:./locales\"`*\n- **routes**\n  - **routePath** - The directory to scan for routes: *Default: `\"path:./controllers\"`*\n- **express**\n  - **trust proxy** Enables reverse proxy support, disabled by default\n  - **jsonp callback** name Changes the default callback name of ?callback=\n  - **json replacer** JSON replacer callback, null by default\n  - **json spaces** JSON response spaces for formatting, defaults to 2 in development, 0 in production\n  - **case sensitive** routing Enable case sensitivity, disabled by default, treating \"/Foo\" and \"/foo\" as the same\n  - **strict routing** Enable strict routing, by default \"/foo\" and \"/foo/\" are treated the same by the router\n  - **view cache** Enables view template compilation caching, enabled in production by default\n  - **view engine** The default engine extension to use when omitted\n  - **views** The view directory path, defaulting to \"./views\"\n  - **route** The root URI prepended to all the routes\t\n- **view engines** - A map of view engines to register for the given app.\n  - **{extension}** - View engine identifier for use by express.\n     - **module** - The node module used to support this view engine.\n     - **settings** - Any configuration settings needed by the identified module.\n- **ssl** Also see tls.createServer http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener\n  - **pfx** - A string or Buffer containing the private key, certificate and CA certs of the server in PFX or PKCS12 format.\n  - **key** - A string or Buffer containing the private key of the server in PEM format. (Required)\n  - **passphrase** - A string of passphrase for the private key or pfx.\n  - **cert** - A string or Buffer containing the certificate key of the server in PEM format. (Required)\n  - **ca** - An array of strings or Buffers of trusted certificates in PEM format.\n  - **crl** - Either a string or list of strings of PEM encoded CRLs (Certificate Revocation List)\n  - **ciphers** - A string describing the ciphers to use or exclude. Default: ```AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH```.\n  - **handshakeTimeout** - Abort the connection if the SSL/TLS handshake does not finish in this many milliseconds. The default is 120 seconds.\n  - **honorCipherOrder** - When choosing a cipher, use the server's preferences instead of the client preferences.\n  - **requestCert** - If true the server will request a certificate from clients that connect and attempt to verify that certificate. Default: ```false```.\n  - **rejectUnauthorized** - If true the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if requestCert is true. Default: ```false```.\n  - **NPNProtocols** - An array or Buffer of possible NPN protocols. (Protocols should be ordered by their priority).\n  - **SNICallback** - A function that will be called if client supports SNI TLS extension. Only one argument will be passed to it: servername. Should return SecureContext instance.\n  - **sessionIdContext** - A string containing a opaque identifier for session resumption.\n  - **secureProtocol** - The SSL method to use.\n  - **slabBufferSize** - Size of slab buffer used by all tls servers and clients. Default: ```10 * 1024 * 1024```. *Note: only change this if you know what you are doing.*\n  - **clientRenegotiationLimit** - Renegotiation limit, default is 3. *Note: only change this if you know what you are doing.*\n  - **clientRenegotiationWindow** - Renegotiation window in seconds, default is 10 minutes. *Note: only change this if you know what you are doing.*\n\n\n\n*middleware.json values:*\n\n- **middleware**\n  - **appsec**\n      - **csrf** - Should CSRF tokens be required. *Default: `true`*\n      - **csp** - Should CSP headers be sent. *Default: `false`*\n          - **reportOnly** - Report only enabled.\n          - **report-uri** - URI the browser should send the report to.\n          - **policy** - Key value object of the CSP policy.\n      - **p3p** - Setting for P3P header. *Default: `false`*\n      - **xframe** - Setting for XFRAME headers. *Default: `\"SAMEORIGIN\"`*\n\n  - **compiler**\n      - **dust** - Where the dev-time compiler should look for dust files. *Default: `\"templates\"`*\n      - **less** - Where the dev-time compiler should look for LESS files. *Default: `\"css\"`*\n      - **sass** - Where the dev-time compiler should look for SASS files. *Default: `\"css\"`*\n          - note: you need to install node-sass for this to work. grunt-contrib-sass would also be of help. \n\n  - **errorPages** - Templates to load when the server returns specific HTTP error codes\n      - **404** *Default: `undefined`*\n      - **500** *Default: `undefined`*\n      - **503** *Default: `undefined`*\n\n  - **multipart**\n      - **params** - Settings to pass to [formidable](https://github.com/felixge/node-formidable), which powers Kraken's multipart form support. *Default: `undefined`*\n\n  - **session**\n      - **module** - Connect-based module name to require for sessions. *Default: `false`*\n      - **secret** - Secret used to hash your cookie. *Default: `\"keyboard cat\"`*\n      - **cookie**\n          - **path** - Path to set on the cookie. *Default: `\"/\"`*\n          - **httpOnly** - HTTP only setting for the cookie. *Default: `true`*\n          - **maxAge** - Maximum age the cookie should exist. *Default: `null`*\n\n  - **static**\n      - **srcRoot** - Where the compiler should look for files. *Default: `\"path:./public\"`*\n      - **rootPath** - Where the compiler should put compiled files. *Default: `\"path:./.build\"`*\n\n\n\n## Customization\n\n\n### Application Life-cycle (Middleware)\n\nYou can customize your application's life-cycle by adding methods to the app delegate in the `index.js` file. This is the ideal place to apply any middleware you might want to use in your application.\n\n- **app.configure(config, next)** - Run on startup. `next` must be called to continue. *Make any changes to your config here.*\n- **app.requestStart(server)** -  Run before most middleware has been registered. *Logging and other middleware that need to see every single request should get applied here.* \n- **app.requestBeforeRoute(server)** - Run before the routes have been added. *Most of your middleware should be applied in this function.*\n- **app.requestAfterRoute(server)** - Run after the routes have been added. *Useful for adding error handling middleware.*\n\n*Example 1: Retrieving custom configuration*\n\n```javascript\napp.configure = function configure(nconf, next) {\n    // Fired when an app configures itself\n    // Retrieve a custom key from ./config/middleware.json or ./config/app.json\n    console.log('My custom config is: ', nconf.get('myCustomKey'));\n};\n```\n\n*Example 2: Using middleware*\n\n```javascript\napp.requestBeforeRoute = function (server) {\n    // Register passport-js middleware\n    server.use(passport.initialize());\n    server.use(passport.session());\n};\n```\n\n*Example 3: Setting Locals for dustjs*\n\n```javascript\napp.requestBeforeRoute = function (server) {\n    // Set locals which can be accessed in  dust template\n    server.use(function(req,res,next){\n        res.locals.whatever = \"whatever you need or from nconf\";\n        //use {whatever} in dust template\n        next();\n    });\n};\n```\n\nFor more information about where to apply your middleware you may want to review http://expressjs.com/guide.html#error-handling.\n\n### Routes\n\nTo add a route you need to create a new file in `/controllers` that exports a function which accepts an express server. From there it's all [express](http://expressjs.com/)!\n\n*Example:*\n\n```\nmodule.exports = function (server) {\n    server.get('/path', function (req, res) {\n    \t// Awesome code!\n    });\n};\n```\n\n\n\n## Content\n\n\n### Format\n\nContent is in key value format. Named variables may be inserted into content strings with `{bracket}` syntax using the name of the value in your data model.\n\n*Example:*\n\n```\nmyPage.title=Welcome to my site!\nmyPage.greeting=Hello, {user}. How are you?\n```\n\n\n### File Structure\n\nContent is loaded from country and language subdirectories inside `/locales` based on the user locale. Convention is used to automatically determine which content file to load: the base template file name and path are looked for in the locales folder.\n\n*Example:*\n\n```\ncontent/\n  US/\n    en/\n      index.properties\n      myDir/\n         page.properties\n\npublic/\n  templates/\n    index.dust\n    myDir/\n      page.dust\n```\n\n\n\n## Builds\n\nA [Grunt](http://gruntjs.com/) task is used for builds. To prepare your code for production run `grunt build` which will create new files in the `.build` directory. This task must be done before running your app in production mode.\n\n## File upload\n\nSupport for [multipart forms](http://en.wikipedia.org/wiki/File_select) is disabled by default. You can enable it by populating \"multipart\" in middleware.json and optionally pass parameters using [formidable's API](https://github.com/felixge/node-formidable).\n\nFiles uploaded in a given request will populate in `req.files`.\n\nAll temporary files uploaded will be automatically removed when the request is completed if you do not remove them yourself.\n\n# Contributing to the Kraken Suite\n\nBugs and new features should be submitted using [Github issues](https://github.com/PayPal/kraken-js/issues/new). Please include with a detailed description and the expected behaviour. If you would like to submit a change yourself do the following steps.\n\n1. Fork it.\n2. Create a branch (`git checkout -b fix-for-that-thing`)\n3. Commit a failing test (`git commit -am \"adds a failing test to demonstrate that thing\"`)\n3. Commit a fix that makes the test pass (`git commit -am \"fixes that thing\"`)\n4. Push to the branch (`git push origin fix-for-that-thing`)\n5. Open a [Pull Request](https://github.com/PayPal/kraken-js/pulls)\n\nPlease keep your branch up to date by rebasing upstream changes from master.\n\n\n## FAQ\n\n### Why use Kraken?\nKraken is the glue to your open source. It sits on top of grunt and express, but offers you a more robust feature set in a web application framework. The benefits include support for externalized content, localization, compile-on-the-fly editing, environment-based configuration, baked-in application security and more.\n\n### How do I run in production mode?\nBuild your project first and then `export NODE_ENV=production` before running the app.\n\n### How to opt out of view rendering\nIf your application does not require template rendering, you can disable it via your `./config/app.json` file by setting the following values to *null*:\n\n```javascript\n  \"view engines\": null,\n  \"express\": {\n    \"view engine\": null\n  }\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/krakenjs/kraken-js/issues"
  },
  "homepage": "https://github.com/krakenjs/kraken-js",
  "_id": "kraken-js@0.7.3",
  "dist": {
    "shasum": "35858836523293001f66613f9eab860281543376"
  },
  "_from": "kraken-js@^0.7.0",
  "_resolved": "https://registry.npmjs.org/kraken-js/-/kraken-js-0.7.3.tgz"
}
