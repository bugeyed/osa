{
  "name": "adaro",
  "version": "0.1.5",
  "description": "An express renderer for DustJs Templates",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/paypal/adaro.git"
  },
  "keywords": [
    "dustjs",
    "express",
    "nodejs"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "core-util-is": "~1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "chai": "~1.5.0",
    "jshint": "*",
    "dustjs-linkedin": "~2.0.3",
    "dustjs-helpers": "~1.1.1",
    "express": "~3.4.0"
  },
  "readme": "adaro\n===================\n\nAn expressjs plugin for handling DustJS view rendering. [dustjs-helpers] (https://github.com/linkedin/dustjs-helpers) are\nincluded by default in this module.\n\n```javascript\nvar express = require('express');\nvar dustjs = require('adaro');\n\nvar app = express();\n\napp.engine('dust', dustjs.dust({ ... });\napp.set('view engine', 'dust');\n\n// For rendering precompiled templates:\n// app.engine('js', dustjs.js({ ... ));\n// app.set('view engine', 'js');\n```\n\n\n### Configuration\nConfig options can be used to specify dust helpers, enabled/disable caching, and custom file loading handlers.\n\n### `layout` (optional) String, Sets default template to use for layout\nDust understands partials, but doesn't understand layouts. Layouts allow you to\nskin your application in different ways without having to rewrite all of your\npartials.\n\nFor example, here are two Dust templates: a layout, and a content page. The\nlayout includes a special partial with the dynamic name `{_main}`. The content\npage has no knowledge of layout; it is itself just a partial.\n\n```html\n<html>\n  <body>\n    {>\"{_main}\"/}\n  </body>\n</html>\n```\n\n```html\n<div>Hello!</div>\n```\n\nUsing `layout`, when a template is rendered, a layout can be\nspecified or disabled. As long as the layout template includes the dynamic partial via\n`{>\"{_main}\"/}` the template you asked for will be wrapped in the specified\nlayout.\n\n```js\n// Use alternate layout\ndust.render('index', { layout: 'myLayout' }, ...);\n```\n\n```js\n// Disable layout altogether\ndust.render('index', { layout: false }, ...);\n```\n\n```html\n<html>\n  <body>\n    <div>Hello!</div>\n  </body>\n</html>\n```\n\n\n\n#### `helpers` (optional) String Array, helper module names\nA helper module must conform the API as established by [dustjs-helpers] (https://github.com/linkedin/dustjs-helpers) provided\nby LinkedIn or export as a function which accepts a sungle argument (being dust itself). Such files souch genreally be designed\nfor use on both client and server.\n\nClient and Server Compatible\n```javascript\n(function (dust) {\n\n   // Add helpers\n\n}(typeof exports !== 'undefined' ? module.exports = require('dustjs-linkedin') : dust));\n```\n\nAlternate API\n```javscript\nmodule.exports = function (dust) {\n    // Add helpers\n};\n```\n\n\n#### `cache` (optional, defaults to true) Boolean\nSet to true to enable dust template caching, or false to disable. If a custom onLoad handler is defined, caching is\ndisabled and assumed to be handled by the client.\n\n\n#### `onLoad` (optional) Function with the signature `function (name, [context], callback)`\nDefine a file read handler for use by dust in loading files.\n```javascript\ndustjs.onLoad = function (name, context, callback) {\n    // Custom file read/processing pipline\n    callback(err, str);\n}\n\napp.engine('dust', dustjs.dust({ cache: false }));\napp.set('view engine', 'dust');\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paypal/adaro/issues"
  },
  "homepage": "https://github.com/paypal/adaro",
  "_id": "adaro@0.1.5",
  "dist": {
    "shasum": "83966fa1e2a28c52c28a7cc1ac043c60c6e0196a"
  },
  "_from": "adaro@^0.1.5",
  "_resolved": "https://registry.npmjs.org/adaro/-/adaro-0.1.5.tgz"
}
